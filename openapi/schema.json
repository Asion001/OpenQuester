{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenQuester API",
    "version": "0.9.0"
  },
  "security": [
    {
      "SessionAuth": []
    }
  ],
  "paths": {
    "/v1/files/{filename}": {
      "get": {
        "summary": "Get link to file from server",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get link that allows you to view the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Get link to upload file on server",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get link that allows you to put the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete file from bucket",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete request send successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages": {
      "post": {
        "summary": "Get upload links for every file in `content.json`",
        "tags": ["Packages"],
        "requestBody": {
          "description": "Data from `content.json` file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageCreationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns object of key-values where key is filename, and value is file upload link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Content is empty!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyContentResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all packages",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PackagesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all packages data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPackages"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages/{id}": {
      "get": {
        "summary": "Get package by id",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get package data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageItem"
                }
              }
            }
          },
          "404": {
            "description": "Package not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Get user info by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/": {
      "get": {
        "summary": "Get all users info",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UsersSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all users data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsers"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Users not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "summary": "Get info about current user",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete current user",
        "tags": ["Users"],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/oauth2": {
      "post": {
        "summary": "Logout user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputOauthLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "get": {
        "summary": "Logout user",
        "tags": ["Auth"],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/games": {
      "get": {
        "summary": "Get all games",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GamesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all games successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGames"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new game",
        "tags": ["Games"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameCreateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/games/{id}": {
      "get": {
        "summary": "Get game by id",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get game data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListItem"
                }
              }
            }
          },
          "404": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete game",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscription/games": {
      "post": {
        "summary": "Subscribe to games events",
        "tags": ["Socket.IO"],
        "description": "Subscribes to the 'games' event to receive updates about game changes, creations, and removals.",
        "responses": {
          "200": {
            "description": "Subscribed to game events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameEventSubscription"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid",
        "description": "Session-based authentication using cookies."
      }
    },
    "schemas": {
      "PageInfo": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "examples": [1000]
          }
        }
      },
      "PackageCreationInput": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/OQContentStructure"
          }
        },
        "required": ["content"]
      },
      "ResponseUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "username": {
            "type": "string",
            "examples": ["John"]
          },
          "email": {
            "type": ["string", "null"],
            "examples": ["john.doe@gmail.com"]
          },
          "discordId": {
            "type": ["string", "null"],
            "examples": ["123123123123"]
          },
          "birthday": {
            "type": ["string", "null"],
            "format": "date",
            "examples": ["2024-01-01"]
          },
          "avatar": {
            "type": ["string", "null"],
            "description": "link on file GET",
            "examples": [
              "https://s3.example.com/openquester-sample-bucket/e/ec/ec65cd3756490723f8bcc3bc432b94a7"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [false]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "examples": [1]
                },
                "name": {
                  "type": "string",
                  "examples": ["get_all_users"]
                }
              }
            }
          }
        }
      },
      "InputOauthLogin": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "examples": ["HSXxyt6nrbW5Gtqw5BWfHPYk9lxDOj"]
          },
          "tokenSchema": {
            "type": ["string", "null"],
            "examples": ["Bearer"]
          },
          "oauthProvider": {
            "type": "string",
            "examples": ["discord"],
            "enum": ["discord"]
          }
        }
      },
      "InputUpdateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": ["string", "null"],
            "examples": ["John Doe"]
          },
          "email": {
            "type": ["string", "null"],
            "examples": ["user@example.com"],
            "format": "email"
          },
          "birthday": {
            "type": ["string", "null"],
            "format": "date",
            "examples": ["2024-01-01"]
          },
          "avatar": {
            "type": ["string", "null"],
            "examples": ["filename_of_file_in_bucket"]
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": ["Logout successful"]
          }
        }
      },
      "OQContentStructure": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/OQMetadataStructure"
          },
          "rounds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OQRoundStructure"
            }
          }
        }
      },
      "OQMetadataStructure": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": ["ha1_ju-156random-string_asd-12f"]
          },
          "title": {
            "type": "string",
            "examples": ["Package title"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "logo": {
            "$ref": "#/components/schemas/OQLogoFile"
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "examples": ["A18"]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "examples": ["Anime"]
            }
          },
          "author": {
            "type": "integer",
            "examples": [6]
          },
          "language": {
            "type": ["string", "null"],
            "examples": ["EN"]
          },
          "comment": {
            "type": ["string", "null"],
            "examples": ["Package comment"]
          }
        }
      },
      "OQLogoFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "$ref": "#/components/schemas/OQFileContentStructure"
          }
        }
      },
      "OQQuestionFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "$ref": "#/components/schemas/OQFileContentStructure"
          },
          "displayTime": {
            "type": "integer",
            "examples": [5000]
          },
          "answerDelay": {
            "type": "integer",
            "examples": [2500]
          }
        }
      },
      "OQAnswerFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "$ref": "#/components/schemas/OQFileContentStructure"
          },
          "displayTime": {
            "type": "integer",
            "examples": [5000]
          }
        }
      },
      "OQFileContentStructure": {
        "type": "object",
        "properties": {
          "sha256": {
            "type": "string",
            "examples": [
              "f611efcb4eb3716cebddec66d4c220438b89830e4d2bb0825d3953cbf8ae3b77"
            ]
          },
          "type": {
            "type": "string",
            "examples": ["image"]
          }
        }
      },
      "OQRoundStructure": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "examples": ["Round name"]
          },
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OQThemeStructure"
            }
          }
        }
      },
      "OQThemeStructure": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "examples": ["Theme name"]
          },
          "comment": {
            "type": "string",
            "examples": ["Theme comment"]
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OQQuestionsStructure"
            }
          }
        }
      },
      "OQQuestionsStructure": {
        "type": "object",
        "properties": {
          "price": {
            "type": "integer",
            "examples": [200]
          },
          "type": {
            "type": "string",
            "examples": ["regular"]
          },
          "text": {
            "type": "string",
            "examples": ["Question text"]
          },
          "hostHint": {
            "type": "string",
            "examples": ["Host hints about the answer"]
          },
          "playersHint": {
            "type": "string",
            "examples": ["Question comment for players"]
          },
          "answerText": {
            "type": "string",
            "examples": ["Actual answer"]
          },
          "questionFile": {
            "type": "object",
            "$ref": "#/components/schemas/OQQuestionFile"
          },
          "answerFile": {
            "type": "object",
            "$ref": "#/components/schemas/OQAnswerFile"
          }
        }
      },
      "GameListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": ["AH2S"]
          },
          "createdBy": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "title": {
            "type": "string",
            "examples": ["Game Title"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "examples": ["A18"]
          },
          "currentRound": {
            "type": "integer",
            "examples": [0]
          },
          "players": {
            "type": "integer",
            "examples": [5]
          },
          "maxPlayers": {
            "type": "integer",
            "examples": [10]
          },
          "startedAt": {
            "type": ["string", "null"],
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "package": {
            "$ref": "#/components/schemas/PackageItem"
          }
        }
      },
      "GameCreateData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "examples": ["Game Title"]
          },
          "packageId": {
            "type": "integer",
            "minimum": 0,
            "examples": [1]
          },
          "isPrivate": {
            "type": "boolean",
            "examples": [false]
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "examples": ["A18"]
          },
          "maxPlayers": {
            "type": "integer",
            "minimum": 2,
            "maximum": 15,
            "examples": [10]
          }
        }
      },
      "Player": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "examples": [1]
          },
          "score": {
            "type": "integer",
            "examples": [100]
          },
          "role": {
            "type": "string",
            "enum": ["player", "showman", "spectator"],
            "examples": ["player"]
          },
          "connected": {
            "type": "boolean",
            "examples": [true]
          }
        }
      },
      "ShortUserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "username": {
            "type": "string",
            "examples": ["John"]
          }
        }
      },
      "GameEvent": {
        "type": "string",
        "enum": ["created", "changed", "deleted", "started"],
        "examples": ["created"]
      },
      "PaginatedPackages": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageItem"
            }
          },
          "pageInfo": { "$ref": "#/components/schemas/PageInfo" }
        }
      },
      "PackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "title": {
            "type": "string",
            "examples": ["Package Title"]
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "examples": ["A18"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "rounds": {
            "type": "integer",
            "examples": [5]
          },
          "author": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "examples": ["Anime"]
            }
          }
        }
      },
      "PaginatedUsers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseUser"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        }
      },
      "PaginatedGames": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameListItem"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        }
      },
      "OrderDirection": {
        "type": "string",
        "enum": ["asc", "desc"],
        "examples": ["asc"],
        "default": "desc"
      },
      "PaginationLimit": {
        "type": "integer",
        "examples": [10],
        "minimum": 1,
        "maximum": 50,
        "default": 10
      },
      "PaginationOffset": {
        "type": "integer",
        "examples": [0],
        "minimum": 0
      },
      "GamesSortBy": {
        "type": ["string", "null"],
        "enum": [
          "id",
          "title",
          "createdAt",
          "createdBy",
          "maxPlayers",
          "players",
          "startedAt"
        ],
        "examples": ["createdAt"],
        "default": "createdAt"
      },
      "UsersSortBy": {
        "type": ["string", "null"],
        "enum": ["id", "is_deleted", "created_at", "username", "email"],
        "examples": ["createdAt"],
        "default": "createdAt"
      },
      "PackagesSortBy": {
        "type": ["string", "null"],
        "enum": ["id", "title", "created_at", "author"],
        "examples": ["created_at"],
        "default": "created_at"
      },
      "PackageUploadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "uploadLinks": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "examples": [
              { "uniqueIdentifier": "https://example.com/upload/file.jpg" }
            ]
          }
        }
      },
      "FileLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "examples": ["http://localhost:9000/file-get-link"]
          }
        }
      },
      "BadFilenameResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Bad filename"]
          }
        }
      },
      "FileUploadLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "examples": ["http://localhost:9000/file-upload-link"]
          }
        }
      },
      "DeleteRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": ["Delete request sent"]
          }
        }
      },
      "EmptyContentResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Content is empty!"]
          }
        }
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Bad request"]
          }
        }
      },
      "PackageNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Package not found"]
          }
        }
      },
      "InvalidSessionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Session invalid or expired"]
          }
        }
      },
      "UserNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["User not found"]
          }
        }
      },
      "PermissionDeniedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["You don't have permission to perform this action"]
          }
        }
      },
      "DiscordAuthFailedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Discord authentication is failed, please try again"]
          }
        }
      },
      "GameNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Game not found"]
          }
        }
      },
      "GameEventSubscription": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/GameEvent"
          },
          "data": {
            "$ref": "#/components/schemas/GameListItem"
          }
        }
      }
    }
  }
}
