{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenQuester API",
    "version": "0.2.9"
  },
  "security": [
    {
      "JWTAuth": []
    }
  ],
  "paths": {
    "/v1/files": {
      "get": {
        "summary": "Get link to file from server",
        "tags": ["Files"],
        "requestBody": {
          "required": true,
          "description": "Filename which you want to get",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "example": "some_filename.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get link that allows you to view the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "http://localhost:9000/file-get-link"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Bad filename"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Get link to upload file on server",
        "tags": ["Files"],
        "requestBody": {
          "required": true,
          "description": "Filename which you want to put in bucket",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "example": "some_filename.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get link that allows you to put the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "http://localhost:9000/file-upload-link"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Bad filename"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete file from bucket",
        "tags": ["Files"],
        "requestBody": {
          "required": true,
          "description": "Filename which you want to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "example": "some_filename.jpg"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Delete request send successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Delete request sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Bad filename"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages": {
      "post": {
        "summary": "Get upload links for every file in `content.json`",
        "tags": ["Packages"],
        "requestBody": {
          "description": "Data from `content.json` file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "$ref": "#/components/schemas/OQContentStructure"
                  }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns object of key-values where key is filename, and value is file upload link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filename": {
                      "type": "string",
                      "example": "file upload link"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Content is empty!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Content is empty!"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all packages",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PackagesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all packages data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPackages"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages/{id}": {
      "get": {
        "summary": "Get package by id",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get package data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPackageItem"
                }
              }
            }
          },
          "404": {
            "description": "Package not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Package not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Get user info by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid or expired JWT token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "400": {
            "description": "You don't have permissions for this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "You don't have permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "You don't have permissions for this operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "You don't have permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/": {
      "get": {
        "summary": "Get all users info",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UsersSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all users data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsers"
                }
              }
            }
          },
          "400": {
            "description": "You have no access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "You don't have permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Users not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "User Registration",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputRegisterUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAuthData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "name,password is required"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "summary": "Get info about user itself by auth token",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Token invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Token invalid or expired"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by auth token",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "400": {
            "description": "Token invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Token invalid or expired"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by auth token",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Token invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Token invalid or expired"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "summary": "User Login",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputLoginUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAuthData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "[\"password\"] is required"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/refresh": {
      "post": {
        "summary": "Refresh tokens",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string"
                  }
                },
                "required": ["refresh_token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAuthData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid or expired refresh token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/games": {
      "get": {
        "summary": "Get all games",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GamesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all games successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGames"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new game",
        "tags": ["Games"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGameCreateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGameListItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/games/{id}": {
      "get": {
        "summary": "Get game by id",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get game data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGameListItem"
                }
              }
            }
          },
          "404": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Game not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscription/games": {
      "post": {
        "summary": "Subscribe to games events",
        "tags": ["Socket.IO"],
        "description": "Subscribes to the 'games' event to receive updates about game changes, creations, and removals.",
        "responses": {
          "200": {
            "description": "Subscribed to game events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "$ref": "#/components/schemas/IGameEvent"
                    },
                    "data": {
                      "$ref": "#/components/schemas/IGameListItem"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JWTAuth": {
        "type": "http",
        "scheme": "Bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme."
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Unauthorized - Invalid or missing token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Access denied"
                }
              }
            }
          }
        }
      },
      "TokenExpiredError": {
        "description": "Unauthorized - Token is expired or invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Token invalid or expired"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "ResponseUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "type": "string",
            "example": "jogn.doe@gmail.com"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "example": "2024-01-01",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "example": "filename_of_file_in_bucket",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "is_deleted": {
            "type": "boolean",
            "example": false
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "admin"
                }
              },
              "required": ["id", "name"]
            },
            "example": [
              {
                "id": 1,
                "name": "admin"
              },
              {
                "id": 2,
                "name": "user"
              }
            ]
          }
        }
      },
      "InputUpdateUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "example": "mySuperCoolPassword123"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "example": "2024-01-01",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "example": "filename_of_file_in_bucket",
            "nullable": true
          }
        }
      },
      "InputRegisterUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "someuser@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "mySuperCoolPassword123"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "example": "2024-01-01",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "example": "filename_of_file_in_bucket",
            "nullable": true
          }
        },
        "required": ["name", "email", "password"]
      },
      "InputLoginUser": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "useremail@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "mySuperCoolPassword123"
          }
        },
        "required": ["login", "password"]
      },
      "ResponseAuthData": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "OQContentStructure": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "$ref": "#/components/schemas/OQMetadataStructure"
          },
          "rounds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OQRoundStructure"
            }
          }
        }
      },
      "OQMetadataStructure": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ha1_ju-156random-string_asd-12f"
          },
          "title": {
            "type": "string",
            "example": "Package title"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00Z"
          },
          "logo": {
            "type": "object",
            "$ref": "#/components/schemas/OQLogoFile",
            "nullable": true
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "example": "A18"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Anime"
            }
          },
          "author": {
            "type": "integer",
            "example": 6
          },
          "language": {
            "type": "string",
            "example": "EN",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "example": "Package comment",
            "nullable": true
          }
        }
      },
      "OQLogoFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "$ref": "#/components/schemas/OQFileContentStructure"
          }
        }
      },
      "OQQuestionFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "$ref": "#/components/schemas/OQFileContentStructure"
          },
          "displayTime": {
            "type": "integer",
            "example": 5000
          },
          "answerDelay": {
            "type": "integer",
            "example": 2500
          }
        }
      },
      "OQAnswerFile": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "$ref": "#/components/schemas/OQFileContentStructure"
          },
          "displayTime": {
            "type": "integer",
            "example": 5000
          }
        }
      },
      "OQFileContentStructure": {
        "type": "object",
        "properties": {
          "sha256": {
            "type": "string",
            "example": "f611efcb4eb3716cebddec66d4c220438b89830e4d2bb0825d3953cbf8ae3b77"
          },
          "type": {
            "type": "string",
            "example": "image"
          }
        }
      },
      "OQRoundStructure": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Round name"
          },
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OQThemeStructure"
            }
          }
        }
      },
      "OQThemeStructure": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Theme name"
          },
          "comment": {
            "type": "string",
            "example": "Theme comment"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OQQuestionsStructure"
            }
          }
        }
      },
      "OQQuestionsStructure": {
        "type": "object",
        "properties": {
          "price": {
            "type": "integer",
            "example": 200
          },
          "type": {
            "type": "string",
            "example": "regular"
          },
          "text": {
            "type": "string",
            "example": "Question text"
          },
          "hostHint": {
            "type": "string",
            "example": "Host hints about the answer"
          },
          "playersHint": {
            "type": "string",
            "example": "Question comment for players"
          },
          "answerText": {
            "type": "string",
            "example": "Actual answer"
          },
          "questionFile": {
            "type": "object",
            "$ref": "#/components/schemas/OQQuestionFile"
          },
          "answerFile": {
            "type": "object",
            "$ref": "#/components/schemas/OQAnswerFile"
          }
        }
      },
      "IGameListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AH2S"
          },
          "createdBy": {
            "$ref": "#/components/schemas/IShortUserInfo"
          },
          "title": {
            "type": "string",
            "example": "Game Title"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "currentRound": {
            "type": "integer",
            "example": 0
          },
          "players": {
            "type": "integer",
            "example": 5
          },
          "maxPlayers": {
            "type": "integer",
            "example": 10
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z",
            "nullable": true
          },
          "package": {
            "$ref": "#/components/schemas/IPackageItem"
          }
        }
      },
      "IGameCreateData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Game Title"
          },
          "packageId": {
            "type": "integer",
            "example": 1
          },
          "isPrivate": {
            "type": "boolean",
            "example": false
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "example": "A18"
          },
          "maxPlayers": {
            "type": "integer",
            "example": 10
          }
        }
      },
      "Player": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "example": 1
          },
          "score": {
            "type": "integer",
            "example": 100
          },
          "role": {
            "type": "string",
            "enum": ["player", "showman", "spectator"],
            "example": "player"
          },
          "connected": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "IShortUserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John"
          }
        }
      },
      "IGameEvent": {
        "type": "string",
        "enum": ["created", "changed", "deleted", "started"],
        "example": "created"
      },
      "PaginatedPackages": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPackageItem"
            }
          },
          "pageInfo": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 1000
              }
            }
          }
        }
      },
      "IPackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Package Title"
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "example": "A18"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "rounds": {
            "type": "integer",
            "example": 5
          },
          "author": {
            "$ref": "#/components/schemas/IShortUserInfo"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Anime"
            }
          }
        }
      },
      "PaginatedUsers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseUser"
            }
          },
          "pageInfo": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 1000
              }
            }
          }
        }
      },
      "PaginatedGames": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGameListItem"
            }
          },
          "pageInfo": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "example": 1000
              }
            }
          }
        }
      },
      "OrderDirection": {
        "type": "string",
        "enum": ["asc", "desc"],
        "example": "asc",
        "default": "desc"
      },
      "PaginationLimit": {
        "type": "integer",
        "example": 10,
        "minimum": 1,
        "maximum": 50,
        "default": 10
      },
      "PaginationOffset": {
        "type": "integer",
        "example": 0,
        "minimum": 0
      },
      "GamesSortBy": {
        "type": "string",
        "nullable": true,
        "enum": [
          "id",
          "title",
          "createdAt",
          "createdBy",
          "maxPlayers",
          "players",
          "startedAt"
        ],
        "example": "createdAt",
        "default": "createdAt"
      },
      "UsersSortBy": {
        "type": "string",
        "nullable": true,
        "enum": [
          "id",
          "title",
          "createdAt",
          "createdBy",
          "maxPlayers",
          "players",
          "startedAt"
        ],
        "example": "createdAt",
        "default": "createdAt"
      },
      "PackagesSortBy": {
        "type": "string",
        "nullable": true,
        "enum": ["id", "title", "created_at", "author"],
        "example": "created_at",
        "default": "created_at"
      }
    }
  }
}
