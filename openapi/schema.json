{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenQuester API",
    "version": "0.9.7"
  },
  "security": [
    {
      "SessionAuth": []
    }
  ],
  "paths": {
    "/v1/files/{filename}": {
      "get": {
        "summary": "Get link to file from server",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get link that allows you to view the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Get link to upload file on server",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get link that allows you to put the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete file from bucket",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete request send successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages": {
      "post": {
        "summary": "Get upload links for every file in `content.json`",
        "tags": ["Packages"],
        "requestBody": {
          "description": "Data from `content.json` file",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageCreationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns object of key-values where key is filename, and value is file upload link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Content is empty!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyContentResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all packages",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PackagesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all packages data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPackages"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages/{id}": {
      "get": {
        "summary": "Get package by id",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get package data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageItem"
                }
              }
            }
          },
          "404": {
            "description": "Package not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Get user info by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/": {
      "get": {
        "summary": "Get all users info",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UsersSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all users data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsers"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Users not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "summary": "Get info about current user",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete current user",
        "tags": ["Users"],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/oauth2": {
      "post": {
        "summary": "Logout user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputOauthLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "get": {
        "summary": "Logout user",
        "tags": ["Auth"],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/games": {
      "get": {
        "summary": "Get all games",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GamesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all games successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGames"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new game",
        "tags": ["Games"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameCreateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/games/{id}": {
      "get": {
        "summary": "Get game by id",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get game data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListItem"
                }
              }
            }
          },
          "404": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete game",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscription/games": {
      "post": {
        "summary": "Subscribe to games events",
        "tags": ["Socket.IO"],
        "description": "Subscribes to the 'games' event to receive updates about game changes, creations, and removals.",
        "responses": {
          "200": {
            "description": "Subscribed to game events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameEventSubscription"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid",
        "description": "Session-based authentication using cookies."
      }
    },
    "schemas": {
      "PageInfo": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "examples": [1000]
          }
        }
      },
      "PackageCreationInput": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/PackageCreateInputData"
          }
        },
        "required": ["content"]
      },
      "ResponseUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "username": {
            "type": "string",
            "examples": ["John"]
          },
          "email": {
            "type": ["string", "null"],
            "examples": ["john.doe@gmail.com"]
          },
          "discordId": {
            "type": ["string", "null"],
            "examples": ["123123123123"]
          },
          "birthday": {
            "type": ["string", "null"],
            "format": "date",
            "examples": ["2024-01-01"]
          },
          "avatar": {
            "type": ["string", "null"],
            "description": "link on file GET",
            "examples": [
              "https://s3.example.com/openquester-sample-bucket/e/ec/ec65cd3756490723f8bcc3bc432b94a7"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [false]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "examples": [1]
                },
                "name": {
                  "type": "string",
                  "examples": ["get_all_users"]
                }
              }
            }
          }
        }
      },
      "InputOauthLogin": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "examples": ["HSXxyt6nrbW5Gtqw5BWfHPYk9lxDOj"]
          },
          "tokenSchema": {
            "type": ["string", "null"],
            "examples": ["Bearer"]
          },
          "oauthProvider": {
            "type": "string",
            "examples": ["discord"],
            "enum": ["discord"]
          }
        }
      },
      "InputUpdateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": ["string", "null"],
            "examples": ["John Doe"]
          },
          "email": {
            "type": ["string", "null"],
            "examples": ["user@example.com"],
            "format": "email"
          },
          "birthday": {
            "type": ["string", "null"],
            "format": "date",
            "examples": ["2024-01-01"]
          },
          "avatar": {
            "type": ["string", "null"],
            "examples": ["filename_of_file_in_bucket"]
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": ["Logout successful"]
          }
        }
      },
      "GameListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": ["AH2S"]
          },
          "createdBy": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "title": {
            "type": "string",
            "examples": ["Game Title"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "examples": ["A18"]
          },
          "currentRound": {
            "type": "integer",
            "examples": [0]
          },
          "players": {
            "type": "integer",
            "examples": [5]
          },
          "maxPlayers": {
            "type": "integer",
            "examples": [10]
          },
          "startedAt": {
            "type": ["string", "null"],
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "package": {
            "$ref": "#/components/schemas/PackageItem"
          }
        }
      },
      "GameCreateData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "examples": ["Game Title"]
          },
          "packageId": {
            "type": "integer",
            "minimum": 0,
            "examples": [1]
          },
          "isPrivate": {
            "type": "boolean",
            "examples": [false]
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "examples": ["A18"]
          },
          "maxPlayers": {
            "type": "integer",
            "minimum": 2,
            "maximum": 15,
            "examples": [10]
          }
        }
      },
      "Player": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "examples": [1]
          },
          "score": {
            "type": "integer",
            "examples": [100]
          },
          "role": {
            "type": "string",
            "enum": ["player", "showman", "spectator"],
            "examples": ["player"]
          },
          "connected": {
            "type": "boolean",
            "examples": [true]
          }
        }
      },
      "ShortUserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "username": {
            "type": "string",
            "examples": ["John"]
          }
        }
      },
      "GameEvent": {
        "type": "string",
        "enum": ["created", "changed", "deleted", "started"],
        "examples": ["created"]
      },
      "PaginatedPackages": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageItem"
            }
          },
          "pageInfo": { "$ref": "#/components/schemas/PageInfo" }
        }
      },
      "PackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "title": {
            "type": "string",
            "examples": ["Package Title"]
          },
          "ageRestriction": {
            "type": "string",
            "enum": ["A18", "A16", "A12", "NONE"],
            "examples": ["A18"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "rounds": {
            "type": "integer",
            "examples": [5]
          },
          "author": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "examples": ["Anime"]
            }
          }
        }
      },
      "PaginatedUsers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseUser"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        }
      },
      "PaginatedGames": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameListItem"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        }
      },
      "OrderDirection": {
        "type": "string",
        "enum": ["asc", "desc"],
        "examples": ["asc"],
        "default": "desc"
      },
      "PaginationLimit": {
        "type": "integer",
        "examples": [10],
        "minimum": 1,
        "maximum": 50,
        "default": 10
      },
      "PaginationOffset": {
        "type": "integer",
        "examples": [0],
        "minimum": 0
      },
      "GamesSortBy": {
        "type": ["string", "null"],
        "enum": [
          "id",
          "title",
          "createdAt",
          "createdBy",
          "maxPlayers",
          "players",
          "startedAt"
        ],
        "examples": ["createdAt"],
        "default": "createdAt"
      },
      "UsersSortBy": {
        "type": ["string", "null"],
        "enum": ["id", "is_deleted", "created_at", "username", "email"],
        "examples": ["createdAt"],
        "default": "createdAt"
      },
      "PackagesSortBy": {
        "type": ["string", "null"],
        "enum": ["id", "title", "created_at", "author"],
        "examples": ["created_at"],
        "default": "created_at"
      },
      "PackageUploadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "uploadLinks": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "examples": [
              { "uniqueIdentifier": "https://example.com/upload/file.jpg" }
            ]
          }
        }
      },
      "FileLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "examples": ["http://localhost:9000/file-get-link"]
          }
        }
      },
      "BadFilenameResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Bad filename"]
          }
        }
      },
      "FileUploadLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "examples": ["http://localhost:9000/file-upload-link"]
          }
        }
      },
      "DeleteRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": ["Delete request sent"]
          }
        }
      },
      "EmptyContentResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Content is empty!"]
          }
        }
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Bad request"]
          }
        }
      },
      "PackageNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Package not found"]
          }
        }
      },
      "InvalidSessionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Session invalid or expired"]
          }
        }
      },
      "UserNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["User not found"]
          }
        }
      },
      "PermissionDeniedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["You don't have permission to perform this action"]
          }
        }
      },
      "DiscordAuthFailedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Discord authentication is failed, please try again"]
          }
        }
      },
      "GameNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Game not found"]
          }
        }
      },
      "GameEventSubscription": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/GameEvent"
          },
          "data": {
            "$ref": "#/components/schemas/GameListItem"
          }
        }
      },
      "AgeRestriction": {
        "type": ["string", "null"],
        "enum": ["A18", "A16", "A12", "NONE"],
        "default": "NONE",
        "description": "Age restriction for the package",
        "examples": ["A18"]
      },
      "PackageFileType": {
        "type": "string",
        "enum": ["video", "audio", "image"],
        "description": "Type of media file for package-related files"
      },
      "QuestionType": {
        "type": "string",
        "enum": ["simple", "stake", "secret", "noRisk", "hidden", "choice"],
        "default": "simple",
        "description": "Type of question within a package"
      },
      "PackageQuestionTransferType": {
        "type": "string",
        "enum": ["any", "exceptCurrent"],
        "default": "any",
        "description": "Transfer type for secret questions",
        "examples": ["any"]
      },
      "FileInput": {
        "type": "object",
        "properties": {
          "md5": {
            "type": "string",
            "description": "MD5 hash of the file",
            "examples": ["d41d8cd98f00b204e9800998ecf8427e"]
          },
          "type": {
            "type": "string",
            "description": "Media type of the file",
            "enum": ["video", "audio", "image"],
            "examples": ["image"]
          }
        },
        "required": ["md5", "type"],
        "description": "Basic file metadata for upload, used in place of full File model for input"
      },
      "PackageLogoFileInput": {
        "type": ["object", "null"],
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileInput"
          }
        },
        "required": ["file"],
        "description": "Logo file structure for package creation. Only images acceptable"
      },
      "PackageQuestionFileInput": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileInput"
          },
          "displayTime": {
            "type": "integer",
            "description": "Display duration in milliseconds",
            "default": 5000,
            "examples": [5000]
          }
        },
        "required": ["file", "displayTime"],
        "description": "Question media file structure for package creation"
      },
      "PackageAnswerFileInput": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileInput"
          },
          "displayTime": {
            "type": "integer",
            "description": "Display duration in milliseconds",
            "default": 5000,
            "examples": [5000]
          }
        },
        "required": ["file", "displayTime"],
        "description": "Answer media file structure for package creation"
      },
      "PackageQuestionInput": {
        "type": "object",
        "properties": {
          "price": {
            "type": "integer",
            "description": "Point value of the question",
            "examples": [200, 400, 500]
          },
          "type": {
            "$ref": "#/components/schemas/QuestionType"
          },
          "isHidden": {
            "type": ["boolean", "null"],
            "default": false,
            "description": "Whether the question is hidden",
            "examples": [false]
          },
          "text": {
            "type": ["string", "null"],
            "description": "Question text",
            "examples": ["Where is Kyiv located?"]
          },
          "answerHint": {
            "type": ["string", "null"],
            "description": "Hint for the answer",
            "examples": ["It's in Europe"]
          },
          "answerText": {
            "type": ["string", "null"],
            "description": "Correct answer text",
            "examples": ["In Ukraine"]
          },
          "answerDelay": {
            "type": ["number", "null"],
            "description": "Delay in milliseconds before being able to answer, if applicable",
            "default": 4000,
            "examples": [7000]
          },
          "questionComment": {
            "type": ["string", "null"],
            "description": "Comment or note about the question",
            "examples": ["You have to say full country name"]
          },
          "questionFiles": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/PackageQuestionFileInput"
            },
            "description": "Media files for the question",
            "examples": [
              {
                "file": {
                  "md5": "b11d8c12300b204as800998ecf84266",
                  "type": "image"
                },
                "displayTime": 3000
              },
              {
                "file": {
                  "md5": "c90d8c12300b204as182904ecf84266",
                  "type": "image"
                },
                "displayTime": 3000
              }
            ]
          },
          "answerFiles": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/PackageAnswerFileInput"
            },
            "description": "Media files for the answer",
            "examples": [
              {
                "file": {
                  "md5": "b12d8c12300b204as800998ecf84266",
                  "type": "image"
                },
                "displayTime": 5000
              }
            ]
          }
        },
        "required": ["price", "type"],
        "description": "Base properties for all question types"
      },
      "ChoiceQuestionInput": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestionInput" },
          {
            "type": "object",
            "properties": {
              "type": { "const": "choice" },
              "subType": { "const": "simple" },
              "showDelay": {
                "type": "number",
                "description": "Delay before showing options in milliseconds",
                "examples": [3000]
              },
              "answers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": ["string", "null"],
                      "description": "Text of the answer option"
                    },
                    "file": {
                      "oneOf": [
                        { "$ref": "#/components/schemas/FileInput" },
                        { "type": "null" }
                      ],
                      "description": "File associated with the answer option"
                    }
                  }
                },
                "minItems": 2,
                "maxItems": 8,
                "description": "Multiple choice options; minimum 2, maximum 8 answers",
                "examples": [
                  [
                    {
                      "text": "Option 1",
                      "file": null
                    },
                    {
                      "text": "Option 2",
                      "file": null
                    },
                    {
                      "text": "Option 3 with image",
                      "file": {
                        "md5": "f99d8c12300b204as800998ecf90777",
                        "type": "image"
                      }
                    },
                    {
                      "text": "Option 4",
                      "file": null
                    }
                  ]
                ]
              }
            },
            "required": ["showDelay", "answers"],
            "description": "Choice question type"
          }
        ]
      },
      "SecretQuestionInput": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestionInput" },
          {
            "type": "object",
            "properties": {
              "type": { "const": "secret" },
              "subType": {
                "type": "string",
                "enum": ["simple", "customPrice"],
                "description": "Subtype of the secret question. customPrice means player can choose cost of question",
                "examples": ["customPrice"]
              },
              "allowedPrices": {
                "type": ["array", "null"],
                "items": { "type": "number" },
                "minItems": 2,
                "maxItems": 5,
                "examples": [
                  [200, 1000],
                  [100, 500, 1000]
                ],
                "description": "Allowed price options for customPrice subtype. Maximum 5 prices to choose"
              },
              "transferType": {
                "$ref": "#/components/schemas/PackageQuestionTransferType"
              }
            },
            "required": ["subType", "transferType"],
            "if": {
              "properties": { "subType": { "const": "customPrice" } }
            },
            "then": {
              "required": ["allowedPrices"]
            },
            "description": "Secret question type. allowedPrices required only if subType is customPrice"
          }
        ]
      },
      "NoRiskQuestionInput": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestionInput" },
          {
            "type": "object",
            "properties": {
              "type": { "const": "noRisk" },
              "subType": {
                "type": "string",
                "enum": ["simple", "forEveryone"],
                "description": "Subtype of the no-risk question. forEveryone means everyone answers it, basically giving chances for everyone, instead of one player",
                "examples": ["forEveryone"]
              },
              "priceMultiplier": {
                "type": "number",
                "description": "Multiplier for question price nominal, so if price 200 with 2x multiplier it will give +400 and -0, depends if answer correct",
                "default": 1.5,
                "examples": [0.5, 1.25, 1.5, 2]
              }
            },
            "required": ["subType", "priceMultiplier"],
            "description": "No-risk question type"
          }
        ]
      },
      "SimpleQuestionInput": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestionInput" },
          {
            "type": "object",
            "properties": {
              "type": { "const": "simple" }
            },
            "description": "Simple question type"
          }
        ]
      },
      "StakeQuestionInput": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestionInput" },
          {
            "type": "object",
            "properties": {
              "type": { "const": "stake" },
              "subType": {
                "type": "string",
                "enum": ["simple", "forEveryone"],
                "description": "Subtype of the stake question. simple is basically auction. forEveryone means everyone place some amount of money and write answer",
                "default": "simple",
                "examples": ["simple"]
              },
              "maxPrice": {
                "type": "number",
                "description": "Maximum price for the stake question, most useful when type is forEveryone - Does not allow top players to go all-in and win. Typically maxPrice can be 2x or 3x of nominal price",
                "examples": [1000]
              }
            },
            "required": ["subType", "maxPrice"]
          }
        ]
      },
      "HiddenQuestionInput": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestionInput" },
          {
            "type": "object",
            "properties": {
              "type": { "const": "hidden" },
              "isHidden": { "const": true }
            },
            "description": "Hidden question type"
          }
        ]
      },
      "PackageQuestionInputUnion": {
        "oneOf": [
          { "$ref": "#/components/schemas/SimpleQuestionInput" },
          { "$ref": "#/components/schemas/StakeQuestionInput" },
          { "$ref": "#/components/schemas/SecretQuestionInput" },
          { "$ref": "#/components/schemas/NoRiskQuestionInput" },
          { "$ref": "#/components/schemas/ChoiceQuestionInput" },
          { "$ref": "#/components/schemas/HiddenQuestionInput" }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "simple": "#/components/schemas/SimpleQuestionInput",
            "stake": "#/components/schemas/StakeQuestionInput",
            "secret": "#/components/schemas/SecretQuestionInput",
            "noRisk": "#/components/schemas/NoRiskQuestionInput",
            "choice": "#/components/schemas/ChoiceQuestionInput",
            "hidden": "#/components/schemas/HiddenQuestionInput"
          }
        },
        "description": "Polymorphic question input union for all question types"
      },
      "PackageThemeInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the theme",
            "examples": ["Opening", "Ending", "Science"]
          },
          "description": {
            "type": ["string", "null"],
            "description": "Description of the theme",
            "examples": [
              "In this theme you have to guess anime by it's opening song"
            ]
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageQuestionInputUnion"
            },
            "description": "Questions in the theme"
          }
        },
        "required": ["name", "questions"],
        "description": "Theme structure for package creation"
      },
      "PackageRoundInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the round",
            "examples": ["Round 1 - Beginners round", "Round of music"]
          },
          "description": {
            "type": ["string", "null"],
            "description": "Description of the round",
            "examples": ["This round contains simple questions"]
          },
          "themes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageThemeInput" },
            "description": "Themes in the round"
          }
        },
        "required": ["name", "themes"],
        "description": "Round structure for package creation"
      },
      "PackageCreateInputData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the package",
            "examples": ["Trivia Night", "Anime pack 2025"]
          },
          "description": {
            "type": ["string", "null"],
            "description": "Description of the package",
            "examples": ["This is package description"]
          },
          "language": {
            "type": ["string", "null"],
            "description": "Language of the package",
            "examples": ["en", "ua"]
          },
          "ageRestriction": {
            "$ref": "#/components/schemas/AgeRestriction",
            "description": "Age restriction"
          },
          "logo": {
            "$ref": "#/components/schemas/PackageLogoFileInput",
            "description": "Logo file for the package"
          },
          "tags": {
            "type": ["array", "null"],
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "type": "string",
                  "description": "A single tag for the package",
                  "examples": ["anime"]
                }
              },
              "required": ["tag"],
              "description": "Individual tag object"
            },
            "description": "Tags for the package. Can be null or an array of tag objects",
            "examples": [
              [
                { "tag": "anime" },
                { "tag": "movie" },
                { "tag": "general" },
                { "tag": "games" }
              ],
              [{ "tag": "trivia" }, { "tag": "fun" }],
              null
            ]
          },
          "rounds": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageRoundInput" },
            "description": "Rounds in the package"
          }
        },
        "required": ["title", "rounds"],
        "description": "Input for creating a new package; author is set via authentication"
      }
    }
  }
}
