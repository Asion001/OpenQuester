name: Build Client

on:
  pull_request:
  workflow_dispatch:
  workflow_call:
    secrets:
      ANDROID_KEYSTORE_PASSWORD:
        required: true
      ANDROID_KEY_PASSWORD:
        required: true
      ANDROID_KEYSTORE_BASE64:
        required: true
      WINDOWS_SIGN_CERT:
        required: true

    inputs:
      DEPLOY_PROD:
        type: boolean
        default: false

  push:
    branches:
      - main

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.found_paths.outputs.client == 'true' || steps.should_force.outputs.should_force == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: found_paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            client:
              - 'client/**'
              - 'openapi/**'

      - name: Check if we should force jobs to run
        id: should_force
        run: echo "should_force=${{ github.event_name == 'workflow_dispatch' || github.workflow == 'Release' || github.event_name == 'push' }}" >> "$GITHUB_OUTPUT"

  build:
    name: Build client (Web & Android)
    needs: pre_job
    if: ${{ !github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]' && needs.pre_job.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    env:
      DONT_USE_PURO: true
    environment: ${{ inputs.DEPLOY_PROD && 'openquester (Production)' || 'openquester (Preview)' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17 + Gradle cache
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: "17"
          cache: gradle

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: ./client/pubspec.yaml
          cache: true

      - name: Install dependencies
        run: |
          flutter pub get
          echo "${{ vars.ENV_FILE_CONTENT }}" > .env
          make pre_run

      - name: Build Web
        run: flutter build web --no-web-resources-cdn --build-number $GITHUB_RUN_NUMBER --wasm

      - name: Publish Web Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-app
          path: ./client/build/web/

      - name: Publish to Cloudflare Pages (Preview)
        if: inputs.DEPLOY_PROD == false
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: pages deploy ./client/build/web/ --project-name=openquester-dev --branch ${{ github.ref_name }}

      - name: Purge Cloudflare cache
        if: inputs.DEPLOY_PROD == false
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{ "purge_everything": true }'

      - name: Decode and setup Android keystore
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Build Android APKs
        run: |
          flutter build apk --release --build-number $GITHUB_RUN_NUMBER
          flutter build apk --release --split-per-abi \
            --target-platform android-arm,android-arm64,android-x64 --build-number $GITHUB_RUN_NUMBER
        env:
          ANDROID_KEYSTORE_PATH: ${{ vars.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEY_ALIAS_NAME: ${{ vars.ANDROID_KEY_ALIAS_NAME }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Publish Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: ./client/build/app/outputs/flutter-apk/*.apk

  build_windows:
    name: Build client (Windows)
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_run == 'true' }}
    environment: ${{ inputs.DEPLOY_PROD && 'openquester (Production)' || 'openquester (Preview)' }}
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./client
    env:
      DONT_USE_PURO: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: ./client/pubspec.yaml
          cache: true

      - name: Install dependencies
        run: |
          flutter pub get
          choco install make -y
          echo "${{ vars.ENV_FILE_CONTENT }}" > .env
          make pre_run

      - name: Build and create msix bundle
        shell: pwsh
        run: |
          Write-Host "Decoding WINDOWS_SIGN_CERT into oq_windows_signing.pfx…"
          $certBytes = [Convert]::FromBase64String($env:WINDOWS_SIGN_CERT)
          [IO.File]::WriteAllBytes('oq_windows_signing.pfx', $certBytes)
          Write-Host "Running msix:create…"
          dart run msix:create `
            -c oq_windows_signing.pfx `
            -p '' `
            --install_certificate false
        env:
          WINDOWS_SIGN_CERT: ${{ secrets.WINDOWS_SIGN_CERT }}

      - name: Publish Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: ./client/build/windows/x64/runner/Release/openquester.msix
