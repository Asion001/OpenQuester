name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  tests:
    uses: ./.github/workflows/test.yml

  build_client:
    needs: [tests]
    uses: ./.github/workflows/build_client.yml
    secrets:
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_docker:
    needs: [tests]
    uses: ./.github/workflows/docker.yml
    permissions:
      contents: read
      packages: write

  publish_release:
    runs-on: ubuntu-latest
    needs: [build_client, build_docker, tests]
    permissions:
      contents: write
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download WEB
        uses: actions/download-artifact@v4
        with:
          name: web-app
          path: web/

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: android-app

      - name: Set latest tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 | tail -n1)
          echo "LATEST_TAG=$LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Create draft release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          tag_name: ${{ env.LATEST_TAG }}
          #TODO: body_path: misc/release/notes.tmpl
          files: |
            *.apk
      # Deploy to Cloudflare Pages with production environment when not on main branch.
      - name: Publish to Cloudflare Pages (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          command: pages deploy web/ --project-name=openquester

      - name: Purge Cloudflare cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{  \"purge_everything\": true }"
